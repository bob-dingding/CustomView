<?xml version="1.0" encoding="utf-8"?>
<android.support.constraint.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:orientation="vertical">

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="本期视频地址：https://www.bilibili.com/video/av17689063/"
                android:textIsSelectable="true"/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="全新定制尺寸和修改尺寸的最重要区别(上一期讲了修改尺寸的方式):需要在计算的同时，保证计算结果满足父 View 给出的的尺寸限制"/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="20dp"
                android:text="父 View 的尺寸限制:
\n1.由来：开发者的要求（布局文件中 layout_ 打头的属性）经过父 View 处理计算后的更精确的要求；
\n2.限制的分类：
\n2.1UNSPECIFIED：不限制
\n2.2AT_MOST：限制上限
\n2.3EXACTLY：限制固定值"/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="20dp"
                android:text="全新定义自定义 View 尺寸的方式:
             \n1.重新 onMeasure()，并计算出 View 的尺寸；
\n2.使用 resolveSize() 来让子 View 的计算结果符合父 View 的限制（当然，如果你想用自己的方式来满足父 View 的限制也行）"/>
        </LinearLayout>
    </ScrollView>

</android.support.constraint.ConstraintLayout>
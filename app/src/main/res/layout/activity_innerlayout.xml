<?xml version="1.0" encoding="utf-8"?>
<android.support.constraint.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:orientation="vertical">

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="重写 onMeasure() 和 onLayout() 来定制 Layout 的内部布局。本期推荐内容：https://www.bilibili.com/video/av18330166/"
                android:textIsSelectable="true"/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="20dp"
                android:text="定制 Layout 内部布局的方式:
\n重写 onMeasure() 来计算内部布局
\n重写 onLayout() 来摆放子 View"/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="20dp"
                android:text="重写 onMeasure() 的三个步骤:
\n1.调用每个子 View 的 measure() 来计算子 View 的尺寸
\n2.计算子 View 的位置并保存子 View 的位置和尺寸
\n3.计算自己的尺寸并用 setMeasuredDimension() 保存"/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="20dp"
                android:text="计算子 View 尺寸的关键:计算子 View 的尺寸，关键在于 measure() 方法的两个参数——也就是子 View 的两个 MeasureSpec 的计算。
\n子 View 的 MeasureSpec 的计算方式:
\n1.结合开发者的要求（xml 中 layout_ 打头的属性）和自己的可用空间（自己的尺寸上限 - 已用尺寸）
\n2.MeasureSpec 中的 mode 而定:EXACTLY / AT_MOST：尺寸上限为 MeasureSpec 中的 size而
UNSPECIFIED：尺寸无上限"/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="20dp"
                android:text="重写 onLayout() 的方式:在 onLayout() 里调用每个子 View 的 layout() ，让它们保存自己的位置和尺寸"/>
        </LinearLayout>
    </ScrollView>

</android.support.constraint.ConstraintLayout>